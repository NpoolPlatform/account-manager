// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/account-manager/pkg/db/ent/account"
	"github.com/NpoolPlatform/account-manager/pkg/db/ent/goodbenefit"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		},
		Type: "Account",
		Fields: map[string]*sqlgraph.FieldSpec{
			account.FieldCreatedAt:              {Type: field.TypeUint32, Column: account.FieldCreatedAt},
			account.FieldUpdatedAt:              {Type: field.TypeUint32, Column: account.FieldUpdatedAt},
			account.FieldDeletedAt:              {Type: field.TypeUint32, Column: account.FieldDeletedAt},
			account.FieldCoinTypeID:             {Type: field.TypeUUID, Column: account.FieldCoinTypeID},
			account.FieldAddress:                {Type: field.TypeString, Column: account.FieldAddress},
			account.FieldUsedFor:                {Type: field.TypeString, Column: account.FieldUsedFor},
			account.FieldPlatformHoldPrivateKey: {Type: field.TypeBool, Column: account.FieldPlatformHoldPrivateKey},
			account.FieldActive:                 {Type: field.TypeBool, Column: account.FieldActive},
			account.FieldLocked:                 {Type: field.TypeBool, Column: account.FieldLocked},
			account.FieldBlocked:                {Type: field.TypeBool, Column: account.FieldBlocked},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   goodbenefit.Table,
			Columns: goodbenefit.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: goodbenefit.FieldID,
			},
		},
		Type: "GoodBenefit",
		Fields: map[string]*sqlgraph.FieldSpec{
			goodbenefit.FieldCreatedAt: {Type: field.TypeUint32, Column: goodbenefit.FieldCreatedAt},
			goodbenefit.FieldUpdatedAt: {Type: field.TypeUint32, Column: goodbenefit.FieldUpdatedAt},
			goodbenefit.FieldDeletedAt: {Type: field.TypeUint32, Column: goodbenefit.FieldDeletedAt},
			goodbenefit.FieldGoodID:    {Type: field.TypeUUID, Column: goodbenefit.FieldGoodID},
			goodbenefit.FieldAccountID: {Type: field.TypeUUID, Column: goodbenefit.FieldAccountID},
			goodbenefit.FieldBackup:    {Type: field.TypeBool, Column: goodbenefit.FieldBackup},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AccountQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AccountQuery builder.
func (aq *AccountQuery) Filter() *AccountFilter {
	return &AccountFilter{aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AccountMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AccountMutation builder.
func (m *AccountMutation) Filter() *AccountFilter {
	return &AccountFilter{m}
}

// AccountFilter provides a generic filtering capability at runtime for AccountQuery.
type AccountFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AccountFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AccountFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(account.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AccountFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(account.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AccountFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(account.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AccountFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(account.FieldDeletedAt))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *AccountFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(account.FieldCoinTypeID))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *AccountFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(account.FieldAddress))
}

// WhereUsedFor applies the entql string predicate on the used_for field.
func (f *AccountFilter) WhereUsedFor(p entql.StringP) {
	f.Where(p.Field(account.FieldUsedFor))
}

// WherePlatformHoldPrivateKey applies the entql bool predicate on the platform_hold_private_key field.
func (f *AccountFilter) WherePlatformHoldPrivateKey(p entql.BoolP) {
	f.Where(p.Field(account.FieldPlatformHoldPrivateKey))
}

// WhereActive applies the entql bool predicate on the active field.
func (f *AccountFilter) WhereActive(p entql.BoolP) {
	f.Where(p.Field(account.FieldActive))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *AccountFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(account.FieldLocked))
}

// WhereBlocked applies the entql bool predicate on the blocked field.
func (f *AccountFilter) WhereBlocked(p entql.BoolP) {
	f.Where(p.Field(account.FieldBlocked))
}

// addPredicate implements the predicateAdder interface.
func (gbq *GoodBenefitQuery) addPredicate(pred func(s *sql.Selector)) {
	gbq.predicates = append(gbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodBenefitQuery builder.
func (gbq *GoodBenefitQuery) Filter() *GoodBenefitFilter {
	return &GoodBenefitFilter{gbq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodBenefitMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodBenefitMutation builder.
func (m *GoodBenefitMutation) Filter() *GoodBenefitFilter {
	return &GoodBenefitFilter{m}
}

// GoodBenefitFilter provides a generic filtering capability at runtime for GoodBenefitQuery.
type GoodBenefitFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *GoodBenefitFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *GoodBenefitFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodBenefitFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodBenefitFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodBenefitFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(goodbenefit.FieldDeletedAt))
}

// WhereGoodID applies the entql [16]byte predicate on the good_id field.
func (f *GoodBenefitFilter) WhereGoodID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldGoodID))
}

// WhereAccountID applies the entql [16]byte predicate on the account_id field.
func (f *GoodBenefitFilter) WhereAccountID(p entql.ValueP) {
	f.Where(p.Field(goodbenefit.FieldAccountID))
}

// WhereBackup applies the entql bool predicate on the backup field.
func (f *GoodBenefitFilter) WhereBackup(p entql.BoolP) {
	f.Where(p.Field(goodbenefit.FieldBackup))
}
