// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/account-manager/pkg/db/ent/account"
	"github.com/NpoolPlatform/account-manager/pkg/db/ent/goodbenefit"
	"github.com/NpoolPlatform/account-manager/pkg/db/ent/predicate"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount     = "Account"
	TypeGoodBenefit = "GoodBenefit"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	created_at                *uint32
	addcreated_at             *int32
	updated_at                *uint32
	addupdated_at             *int32
	deleted_at                *uint32
	adddeleted_at             *int32
	coin_type_id              *uuid.UUID
	address                   *string
	used_for                  *string
	platform_hold_private_key *bool
	active                    *bool
	locked                    *bool
	blocked                   *bool
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Account, error)
	predicates                []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id uuid.UUID) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Account entities.
func (m *AccountMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *AccountMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AccountMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AccountMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AccountMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *AccountMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AccountMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AccountMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AccountMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AccountMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *AccountMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AccountMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AccountMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *AccountMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *AccountMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (m *AccountMutation) ClearCoinTypeID() {
	m.coin_type_id = nil
	m.clearedFields[account.FieldCoinTypeID] = struct{}{}
}

// CoinTypeIDCleared returns if the "coin_type_id" field was cleared in this mutation.
func (m *AccountMutation) CoinTypeIDCleared() bool {
	_, ok := m.clearedFields[account.FieldCoinTypeID]
	return ok
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *AccountMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
	delete(m.clearedFields, account.FieldCoinTypeID)
}

// SetAddress sets the "address" field.
func (m *AccountMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *AccountMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *AccountMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[account.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *AccountMutation) AddressCleared() bool {
	_, ok := m.clearedFields[account.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *AccountMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, account.FieldAddress)
}

// SetUsedFor sets the "used_for" field.
func (m *AccountMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *AccountMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ClearUsedFor clears the value of the "used_for" field.
func (m *AccountMutation) ClearUsedFor() {
	m.used_for = nil
	m.clearedFields[account.FieldUsedFor] = struct{}{}
}

// UsedForCleared returns if the "used_for" field was cleared in this mutation.
func (m *AccountMutation) UsedForCleared() bool {
	_, ok := m.clearedFields[account.FieldUsedFor]
	return ok
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *AccountMutation) ResetUsedFor() {
	m.used_for = nil
	delete(m.clearedFields, account.FieldUsedFor)
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (m *AccountMutation) SetPlatformHoldPrivateKey(b bool) {
	m.platform_hold_private_key = &b
}

// PlatformHoldPrivateKey returns the value of the "platform_hold_private_key" field in the mutation.
func (m *AccountMutation) PlatformHoldPrivateKey() (r bool, exists bool) {
	v := m.platform_hold_private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformHoldPrivateKey returns the old "platform_hold_private_key" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPlatformHoldPrivateKey(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformHoldPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformHoldPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformHoldPrivateKey: %w", err)
	}
	return oldValue.PlatformHoldPrivateKey, nil
}

// ClearPlatformHoldPrivateKey clears the value of the "platform_hold_private_key" field.
func (m *AccountMutation) ClearPlatformHoldPrivateKey() {
	m.platform_hold_private_key = nil
	m.clearedFields[account.FieldPlatformHoldPrivateKey] = struct{}{}
}

// PlatformHoldPrivateKeyCleared returns if the "platform_hold_private_key" field was cleared in this mutation.
func (m *AccountMutation) PlatformHoldPrivateKeyCleared() bool {
	_, ok := m.clearedFields[account.FieldPlatformHoldPrivateKey]
	return ok
}

// ResetPlatformHoldPrivateKey resets all changes to the "platform_hold_private_key" field.
func (m *AccountMutation) ResetPlatformHoldPrivateKey() {
	m.platform_hold_private_key = nil
	delete(m.clearedFields, account.FieldPlatformHoldPrivateKey)
}

// SetActive sets the "active" field.
func (m *AccountMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *AccountMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ClearActive clears the value of the "active" field.
func (m *AccountMutation) ClearActive() {
	m.active = nil
	m.clearedFields[account.FieldActive] = struct{}{}
}

// ActiveCleared returns if the "active" field was cleared in this mutation.
func (m *AccountMutation) ActiveCleared() bool {
	_, ok := m.clearedFields[account.FieldActive]
	return ok
}

// ResetActive resets all changes to the "active" field.
func (m *AccountMutation) ResetActive() {
	m.active = nil
	delete(m.clearedFields, account.FieldActive)
}

// SetLocked sets the "locked" field.
func (m *AccountMutation) SetLocked(b bool) {
	m.locked = &b
}

// Locked returns the value of the "locked" field in the mutation.
func (m *AccountMutation) Locked() (r bool, exists bool) {
	v := m.locked
	if v == nil {
		return
	}
	return *v, true
}

// OldLocked returns the old "locked" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldLocked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocked: %w", err)
	}
	return oldValue.Locked, nil
}

// ClearLocked clears the value of the "locked" field.
func (m *AccountMutation) ClearLocked() {
	m.locked = nil
	m.clearedFields[account.FieldLocked] = struct{}{}
}

// LockedCleared returns if the "locked" field was cleared in this mutation.
func (m *AccountMutation) LockedCleared() bool {
	_, ok := m.clearedFields[account.FieldLocked]
	return ok
}

// ResetLocked resets all changes to the "locked" field.
func (m *AccountMutation) ResetLocked() {
	m.locked = nil
	delete(m.clearedFields, account.FieldLocked)
}

// SetBlocked sets the "blocked" field.
func (m *AccountMutation) SetBlocked(b bool) {
	m.blocked = &b
}

// Blocked returns the value of the "blocked" field in the mutation.
func (m *AccountMutation) Blocked() (r bool, exists bool) {
	v := m.blocked
	if v == nil {
		return
	}
	return *v, true
}

// OldBlocked returns the old "blocked" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldBlocked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlocked: %w", err)
	}
	return oldValue.Blocked, nil
}

// ClearBlocked clears the value of the "blocked" field.
func (m *AccountMutation) ClearBlocked() {
	m.blocked = nil
	m.clearedFields[account.FieldBlocked] = struct{}{}
}

// BlockedCleared returns if the "blocked" field was cleared in this mutation.
func (m *AccountMutation) BlockedCleared() bool {
	_, ok := m.clearedFields[account.FieldBlocked]
	return ok
}

// ResetBlocked resets all changes to the "blocked" field.
func (m *AccountMutation) ResetBlocked() {
	m.blocked = nil
	delete(m.clearedFields, account.FieldBlocked)
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, account.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, account.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, account.FieldDeletedAt)
	}
	if m.coin_type_id != nil {
		fields = append(fields, account.FieldCoinTypeID)
	}
	if m.address != nil {
		fields = append(fields, account.FieldAddress)
	}
	if m.used_for != nil {
		fields = append(fields, account.FieldUsedFor)
	}
	if m.platform_hold_private_key != nil {
		fields = append(fields, account.FieldPlatformHoldPrivateKey)
	}
	if m.active != nil {
		fields = append(fields, account.FieldActive)
	}
	if m.locked != nil {
		fields = append(fields, account.FieldLocked)
	}
	if m.blocked != nil {
		fields = append(fields, account.FieldBlocked)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldCreatedAt:
		return m.CreatedAt()
	case account.FieldUpdatedAt:
		return m.UpdatedAt()
	case account.FieldDeletedAt:
		return m.DeletedAt()
	case account.FieldCoinTypeID:
		return m.CoinTypeID()
	case account.FieldAddress:
		return m.Address()
	case account.FieldUsedFor:
		return m.UsedFor()
	case account.FieldPlatformHoldPrivateKey:
		return m.PlatformHoldPrivateKey()
	case account.FieldActive:
		return m.Active()
	case account.FieldLocked:
		return m.Locked()
	case account.FieldBlocked:
		return m.Blocked()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case account.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case account.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case account.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case account.FieldAddress:
		return m.OldAddress(ctx)
	case account.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case account.FieldPlatformHoldPrivateKey:
		return m.OldPlatformHoldPrivateKey(ctx)
	case account.FieldActive:
		return m.OldActive(ctx)
	case account.FieldLocked:
		return m.OldLocked(ctx)
	case account.FieldBlocked:
		return m.OldBlocked(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case account.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case account.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case account.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case account.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case account.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case account.FieldPlatformHoldPrivateKey:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformHoldPrivateKey(v)
		return nil
	case account.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case account.FieldLocked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocked(v)
		return nil
	case account.FieldBlocked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlocked(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, account.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, account.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, account.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case account.FieldCreatedAt:
		return m.AddedCreatedAt()
	case account.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case account.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case account.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case account.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case account.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(account.FieldCoinTypeID) {
		fields = append(fields, account.FieldCoinTypeID)
	}
	if m.FieldCleared(account.FieldAddress) {
		fields = append(fields, account.FieldAddress)
	}
	if m.FieldCleared(account.FieldUsedFor) {
		fields = append(fields, account.FieldUsedFor)
	}
	if m.FieldCleared(account.FieldPlatformHoldPrivateKey) {
		fields = append(fields, account.FieldPlatformHoldPrivateKey)
	}
	if m.FieldCleared(account.FieldActive) {
		fields = append(fields, account.FieldActive)
	}
	if m.FieldCleared(account.FieldLocked) {
		fields = append(fields, account.FieldLocked)
	}
	if m.FieldCleared(account.FieldBlocked) {
		fields = append(fields, account.FieldBlocked)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	switch name {
	case account.FieldCoinTypeID:
		m.ClearCoinTypeID()
		return nil
	case account.FieldAddress:
		m.ClearAddress()
		return nil
	case account.FieldUsedFor:
		m.ClearUsedFor()
		return nil
	case account.FieldPlatformHoldPrivateKey:
		m.ClearPlatformHoldPrivateKey()
		return nil
	case account.FieldActive:
		m.ClearActive()
		return nil
	case account.FieldLocked:
		m.ClearLocked()
		return nil
	case account.FieldBlocked:
		m.ClearBlocked()
		return nil
	}
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case account.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case account.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case account.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case account.FieldAddress:
		m.ResetAddress()
		return nil
	case account.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case account.FieldPlatformHoldPrivateKey:
		m.ResetPlatformHoldPrivateKey()
		return nil
	case account.FieldActive:
		m.ResetActive()
		return nil
	case account.FieldLocked:
		m.ResetLocked()
		return nil
	case account.FieldBlocked:
		m.ResetBlocked()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Account edge %s", name)
}

// GoodBenefitMutation represents an operation that mutates the GoodBenefit nodes in the graph.
type GoodBenefitMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	good_id       *uuid.UUID
	account_id    *uuid.UUID
	backup        *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GoodBenefit, error)
	predicates    []predicate.GoodBenefit
}

var _ ent.Mutation = (*GoodBenefitMutation)(nil)

// goodbenefitOption allows management of the mutation configuration using functional options.
type goodbenefitOption func(*GoodBenefitMutation)

// newGoodBenefitMutation creates new mutation for the GoodBenefit entity.
func newGoodBenefitMutation(c config, op Op, opts ...goodbenefitOption) *GoodBenefitMutation {
	m := &GoodBenefitMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodBenefit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodBenefitID sets the ID field of the mutation.
func withGoodBenefitID(id uuid.UUID) goodbenefitOption {
	return func(m *GoodBenefitMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodBenefit
		)
		m.oldValue = func(ctx context.Context) (*GoodBenefit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodBenefit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodBenefit sets the old GoodBenefit of the mutation.
func withGoodBenefit(node *GoodBenefit) goodbenefitOption {
	return func(m *GoodBenefitMutation) {
		m.oldValue = func(context.Context) (*GoodBenefit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodBenefitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodBenefitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodBenefit entities.
func (m *GoodBenefitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodBenefitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GoodBenefitMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GoodBenefit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GoodBenefitMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GoodBenefitMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *GoodBenefitMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *GoodBenefitMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GoodBenefitMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GoodBenefitMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GoodBenefitMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *GoodBenefitMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *GoodBenefitMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GoodBenefitMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GoodBenefitMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GoodBenefitMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *GoodBenefitMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *GoodBenefitMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GoodBenefitMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetGoodID sets the "good_id" field.
func (m *GoodBenefitMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *GoodBenefitMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ClearGoodID clears the value of the "good_id" field.
func (m *GoodBenefitMutation) ClearGoodID() {
	m.good_id = nil
	m.clearedFields[goodbenefit.FieldGoodID] = struct{}{}
}

// GoodIDCleared returns if the "good_id" field was cleared in this mutation.
func (m *GoodBenefitMutation) GoodIDCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldGoodID]
	return ok
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *GoodBenefitMutation) ResetGoodID() {
	m.good_id = nil
	delete(m.clearedFields, goodbenefit.FieldGoodID)
}

// SetAccountID sets the "account_id" field.
func (m *GoodBenefitMutation) SetAccountID(u uuid.UUID) {
	m.account_id = &u
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *GoodBenefitMutation) AccountID() (r uuid.UUID, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// ClearAccountID clears the value of the "account_id" field.
func (m *GoodBenefitMutation) ClearAccountID() {
	m.account_id = nil
	m.clearedFields[goodbenefit.FieldAccountID] = struct{}{}
}

// AccountIDCleared returns if the "account_id" field was cleared in this mutation.
func (m *GoodBenefitMutation) AccountIDCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldAccountID]
	return ok
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *GoodBenefitMutation) ResetAccountID() {
	m.account_id = nil
	delete(m.clearedFields, goodbenefit.FieldAccountID)
}

// SetBackup sets the "backup" field.
func (m *GoodBenefitMutation) SetBackup(b bool) {
	m.backup = &b
}

// Backup returns the value of the "backup" field in the mutation.
func (m *GoodBenefitMutation) Backup() (r bool, exists bool) {
	v := m.backup
	if v == nil {
		return
	}
	return *v, true
}

// OldBackup returns the old "backup" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldBackup(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBackup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBackup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBackup: %w", err)
	}
	return oldValue.Backup, nil
}

// ClearBackup clears the value of the "backup" field.
func (m *GoodBenefitMutation) ClearBackup() {
	m.backup = nil
	m.clearedFields[goodbenefit.FieldBackup] = struct{}{}
}

// BackupCleared returns if the "backup" field was cleared in this mutation.
func (m *GoodBenefitMutation) BackupCleared() bool {
	_, ok := m.clearedFields[goodbenefit.FieldBackup]
	return ok
}

// ResetBackup resets all changes to the "backup" field.
func (m *GoodBenefitMutation) ResetBackup() {
	m.backup = nil
	delete(m.clearedFields, goodbenefit.FieldBackup)
}

// Where appends a list predicates to the GoodBenefitMutation builder.
func (m *GoodBenefitMutation) Where(ps ...predicate.GoodBenefit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodBenefitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodBenefit).
func (m *GoodBenefitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodBenefitMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, goodbenefit.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, goodbenefit.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, goodbenefit.FieldDeletedAt)
	}
	if m.good_id != nil {
		fields = append(fields, goodbenefit.FieldGoodID)
	}
	if m.account_id != nil {
		fields = append(fields, goodbenefit.FieldAccountID)
	}
	if m.backup != nil {
		fields = append(fields, goodbenefit.FieldBackup)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodBenefitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodbenefit.FieldCreatedAt:
		return m.CreatedAt()
	case goodbenefit.FieldUpdatedAt:
		return m.UpdatedAt()
	case goodbenefit.FieldDeletedAt:
		return m.DeletedAt()
	case goodbenefit.FieldGoodID:
		return m.GoodID()
	case goodbenefit.FieldAccountID:
		return m.AccountID()
	case goodbenefit.FieldBackup:
		return m.Backup()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodBenefitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodbenefit.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case goodbenefit.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case goodbenefit.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case goodbenefit.FieldGoodID:
		return m.OldGoodID(ctx)
	case goodbenefit.FieldAccountID:
		return m.OldAccountID(ctx)
	case goodbenefit.FieldBackup:
		return m.OldBackup(ctx)
	}
	return nil, fmt.Errorf("unknown GoodBenefit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodBenefitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodbenefit.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case goodbenefit.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case goodbenefit.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case goodbenefit.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case goodbenefit.FieldAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case goodbenefit.FieldBackup:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBackup(v)
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodBenefitMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, goodbenefit.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, goodbenefit.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, goodbenefit.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodBenefitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodbenefit.FieldCreatedAt:
		return m.AddedCreatedAt()
	case goodbenefit.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case goodbenefit.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodBenefitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodbenefit.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case goodbenefit.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case goodbenefit.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodBenefitMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(goodbenefit.FieldGoodID) {
		fields = append(fields, goodbenefit.FieldGoodID)
	}
	if m.FieldCleared(goodbenefit.FieldAccountID) {
		fields = append(fields, goodbenefit.FieldAccountID)
	}
	if m.FieldCleared(goodbenefit.FieldBackup) {
		fields = append(fields, goodbenefit.FieldBackup)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodBenefitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodBenefitMutation) ClearField(name string) error {
	switch name {
	case goodbenefit.FieldGoodID:
		m.ClearGoodID()
		return nil
	case goodbenefit.FieldAccountID:
		m.ClearAccountID()
		return nil
	case goodbenefit.FieldBackup:
		m.ClearBackup()
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodBenefitMutation) ResetField(name string) error {
	switch name {
	case goodbenefit.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case goodbenefit.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case goodbenefit.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case goodbenefit.FieldGoodID:
		m.ResetGoodID()
		return nil
	case goodbenefit.FieldAccountID:
		m.ResetAccountID()
		return nil
	case goodbenefit.FieldBackup:
		m.ResetBackup()
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodBenefitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodBenefitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodBenefitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodBenefitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodBenefitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodBenefitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodBenefitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodBenefit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodBenefitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodBenefit edge %s", name)
}
